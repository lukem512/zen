extends ../../layout

block content
	- function formatDuration(t) {
		- var str = "";
		- var days = moment.duration(t).days();
		- if (days > 0) str += days + ' days, ';
		-
		- var hours = moment.duration(t).hours();
		- if (hours > 0) str += hours + ' hours, ';
		-
		- var minutes = moment.duration(t).minutes();
		- if (minutes > 0) str += minutes + ' minutes, ';
		- str += moment.duration(t).seconds() + ' seconds';
		-
		- return str;
		- }

	h1= title
	p This page contains an overview of activity on the platform. Select a group or a user to view them in more detail.

	#overview
		table.table.table-bordered
			thead
				tr
					td Schedules
					td Pledges
					td Fulfilments
			tbody
				tr
					td
						ul
							li Total time scheduled: 
								strong #{formatDuration(statistics.schedules.total)}
							li Number of schedules: 
								strong #{statistics.schedules.n}
							if statistics.schedules.meanTotal
								li Average time scheduled (mean): 
									strong #{formatDuration(statistics.schedules.meanTotal)}
							if statistics.schedules.meanN
								li Average number of schedules (mean): 
									strong #{statistics.schedules.meanN.toFixed(3)}

							if statistics.schedules.mean
								li Average time scheduled (mean): 
									strong #{formatDuration(statistics.schedules.mean)}
							if statistics.schedules.mode
								li Most common time scheduled (mode): 
									strong #{formatDuration(statistics.schedules.mode)}
							if statistics.schedules.median
								li Median time scheduled: 
									strong #{formatDuration(statistics.schedules.median)}
							if statistics.schedules.range
								li Range: 
									strong #{formatDuration(statistics.schedules.range)}
									if statistics.schedules.min && statistics.schedules.max
											|  (min: #{formatDuration(statistics.schedules.min)}, max: #{formatDuration(statistics.schedules.max)})

					td
						ul
							li Total time pledged: 
								strong #{formatDuration(statistics.pledges.total)}
							li Number of pledges: 
								strong #{statistics.pledges.n}
							li Total time spent fulfilling pledges: 
								strong #{formatDuration(statistics.pledges.fulfilled)}
							if statistics.pledges.mean
								li Average time pledged (mean): 
									strong #{formatDuration(statistics.pledges.mean)}
							if statistics.pledges.mode
								li Most common time pledged (mode): 
									strong #{formatDuration(statistics.pledges.mode)}
							if statistics.pledges.median
								li Median time pledged: 
									strong #{formatDuration(statistics.pledges.median)}
							if statistics.pledges.range
								li Range: 
									strong #{formatDuration(statistics.pledges.range)}
									if statistics.pledges.min && statistics.pledges.max
											|  (min: #{formatDuration(statistics.pledges.min)}, max: #{formatDuration(statistics.pledges.max)})

					td
						ul
							li Total time logged: 
								strong #{formatDuration(statistics.fulfilments.total)}
							li Number of logs: 
								strong #{statistics.fulfilments.n}
							li Total time logged in real-time: 
								strong #{formatDuration(statistics.fulfilments.real_time)}
							li Total time logged in retrospectively: 
								strong #{formatDuration(statistics.fulfilments.retrospective)}
							if statistics.fulfilments.mean
								li Average time logged (mean): 
									strong #{formatDuration(statistics.fulfilments.mean)}
							if statistics.fulfilments.mode
								li Most common time logged (mode): 
									strong #{formatDuration(statistics.fulfilments.mode)}
							if statistics.fulfilments.median
								li Median time logged: 
									strong #{formatDuration(statistics.fulfilments.median)}
							if statistics.fulfilments.range
								li Range: 
									strong #{formatDuration(statistics.fulfilments.range)}
									if statistics.fulfilments.min && statistics.fulfilments.max
											|  (min: #{formatDuration(statistics.fulfilments.min)}, max: #{formatDuration(statistics.fulfilments.max)})

		if statistics.users
			p 
				| This data is taken from 
				strong #{statistics.users.usernames.length}
				|  users.

	hr

	if view
		button#btnBack.btn.btn-primary(onClick="location.href=\"/admin/analysis/\"")
			i.fa.fa-arrow-circle-left
			| &nbsp; Overview
	else
		button#btnControl.btn.btn-primary(onClick="location.href=\"/admin/\"")
			i.fa.fa-arrow-circle-left
			| &nbsp; Control Panel

		| &nbsp;

		button#btnUser.btn.btn-success(onClick="location.href=\"/admin/analysis/users\"")
			i.fa.fa-user
			| &nbsp; Users

		| &nbsp;

		button#btnGroup.btn.btn-success(onClick="location.href=\"/admin/analysis/groups\"")
			i.fa.fa-users
			| &nbsp; Group

		| &nbsp;

		button#btnCompare.btn.btn-success(onClick="location.href=\"/admin/analysis/compare\"")
				i.fa.fa-arrow-circle-right
				| &nbsp; Compare
